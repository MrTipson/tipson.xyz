---
export type SubDirectory = { items: SidebarEntry[], collapsed?: boolean }
export type Link = { link: string }
export type SidebarEntry = { label: string } & (SubDirectory | Link)

import "@/styles/markdown.css";
import type { MarkdownHeading } from "astro";
import L from "@/layout/layout.astro";
import type { AuthorType, MarkdownType } from "@/content/config";
import { getEntry } from "astro:content";

type Props = {
	headings: MarkdownHeading[];
	sidebar: SidebarEntry[];
} & MarkdownType;
const { title, description, headings, sidebar, changes } = Astro.props;
const authors = new Map<string, AuthorType>();
for(const change of changes) {
	if(!authors.has(change.author.id)) {
		const author = await getEntry(change.author.collection, change.author.id);
		authors.set(change.author.id, author.data);
	}
}
const tocHeadings = headings.filter(x => x.depth < 5);
const tocPaddings = [undefined, "pl-0", "pl-4", "pl-8", "pl-10", "pl-12", "pl-14"];
const linkStyle = "no-underline block text-c2 ml-8 hover:text-c1";
const detailsStyle = "pl-2 ml-6 open:text-c1 my-3";

function constructSidebar(sidebar: SidebarEntry[]): string {
	return sidebar
		.map((entry) => {
			if ("link" in entry) {
				return `<a class="${linkStyle}" href=${entry.link}>${entry.label}</a>`;
			} else if ("items" in entry) {
				return `
				<details class="${detailsStyle}" open=${!entry.collapsed}>
					<summary class="hover:text-c1">${entry.label}</summary>
					<div>${constructSidebar(entry.items)}</div>
				</details>`;
			}
		})
		.join("");
}
---

<L {title} {description}>
	<div class="columns bg-c1-fill overflow-auto">
		<nav id="sidebar" class="sidebar">
			<div class="sidebarPullMark"/>
			<div class="sidebarContent scrollbar" set:html={constructSidebar(sidebar)}/>
		</nav>
		<main class="content scrollbar md pb-10 max-w-full">
			<slot />
			<hr/>
			<h2 id="change-log">Change log</h2>
			<div class="mx-4">
				{
					changes.map(x => (
						<div>[{new Date(x.date).toLocaleDateString()}] {authors.get(x.author.id)?.["display-name"]}: {x.comment}</div>
					))
				}
			</div>
		</main>
		<aside id="toc" class="toc scrollbar">
			<div class="tocPullMark"/>
			<div class="tocContent">
				{<h3 class="mx-0 text-c1-accent">Contents</h3>}
				<div class="toc-headings relative">
					{
						tocHeadings.map((x,i) => (
							<a
								class={`block ${tocPaddings[x.depth]} text-c2 hover:text-c1 ${i === 0 ? " hasIndicator" : ""}`}
								href={"#" + x.slug}
							>
								{x.text}
							</a>
						))
					}
					<a class={`mx-0 text-c3 hover:text-c1 ${tocHeadings.length === 0 ? "hasIndicator" : ""}`} href="#change-log">Change log</a>
				</div>
			</div>
		</aside>
	</div>
</L>

<style>
	.sidebar, .toc {
		@apply fixed top-0 bottom-0 z-10 bg-c2-fill motion-reduce:transition-none max-w-[80%] transition-all;
	}
	.sidebar {
		@apply -translate-x-full;
	}
	.sidebar.open {
		@apply border-r border-c3-accent translate-x-0;
	}
	.sidebarContent {
		@apply p-4 text-c3 no-underline overflow-auto h-full;
	}
	.sidebarPullMark, .tocPullMark {
		@apply top-20 block absolute p-2 bg-c2-fill z-10 border-t border-b border-c3;
	}
	.sidebarPullMark {
		@apply left-full border-r;
	}
	.tocPullMark {
		@apply right-full border-l;
	}
	.columns {
		@apply relative h-full scroll-pt-2;
	}
	.content {
		@apply relative grow shrink px-12 scroll-pt-2 basis-0 overflow-auto h-full;
	}
	.toc {
		@apply right-0 translate-x-full text-c1 overflow-x-visible;
	}
	.tocContent {
		@apply h-full overflow-auto p-12;
	}
	.hasIndicator::before {
		@apply content-[''] border-c2-accent absolute -left-4 w-2 h-2 border-b border-r -rotate-45 translate-y-2;
	}
	.toc.open {
		@apply border-l border-c3-accent translate-x-0;
	}

	@media screen(md) {
		.sidebar, .toc {
			@apply static shrink-[0.5] bg-inherit shadow-none transform-none;
		}
		.sidebarPullMark, .tocPullMark {
			@apply hidden;
		}
		.sidebarContent {
			@apply pt-12;
		}
		.columns {
			@apply flex flex-row overflow-hidden;
		}
	}
</style>
<style is:global>
	details { @apply text-c3 border-l border-c3 pl-2 }
	summary { @apply cursor-pointer relative }
	summary::before { @apply content-[''] border-c3 absolute top-0 bottom-0 -left-8 w-2 h-2 my-auto border-b border-r -rotate-45 transition-transform duration-200 }
	details[open] summary::before { @apply rotate-45 }
	summary::marker { @apply content-none }
</style>

<script>
const sidebar = document.getElementById("sidebar");
const toc = document.getElementById("toc");
document.querySelector(".sidebarPullMark")?.addEventListener("click", () => {
	sidebar?.classList.toggle("open");
	toc?.classList.remove("open");
});
document.querySelector(".tocPullMark")?.addEventListener("click", () => {
	toc?.classList.toggle("open");
	sidebar?.classList.remove("open");	
});

const headings = [...document.querySelectorAll<HTMLHeadingElement>("main > h1, main > h2, main > h3, main > h4")];
const tocElements = document.querySelector(".toc-headings")?.children || [];
const main = document.querySelector("main");
main?.addEventListener("scroll", scrollHandler);
main?.addEventListener("touchmove", scrollHandler);
let hasIndicator = 0;
function scrollHandler() {
	if(!main) return;
	const relativePosition = (main.scrollTop / (main.scrollHeight - main.offsetHeight))**2;
	let i = 0;
	while (i < headings.length && main.scrollTop >= headings[i].offsetTop) i++;
	if (i > 0) {
		i += (main.scrollTop-headings[i-1].offsetTop)/(headings[i].offsetTop-headings[i-1].offsetTop);
	}
	let j = headings.length-1;
	while (j > 0 && main.scrollTop+main.offsetHeight < headings[j].offsetTop) j--;
	if (j < headings.length - 1) {
		j += (headings[j+1].offsetTop-headings[j].offsetTop)/(headings[j+1].offsetTop-(main.scrollTop));
	}
	let offset = Math.floor((i-1)*(1-relativePosition)+j*relativePosition);
	if (offset >= 0 && offset < tocElements.length && offset !== hasIndicator) {
		tocElements[hasIndicator].classList.remove("hasIndicator");
		tocElements[offset].classList.add("hasIndicator");
		hasIndicator = offset;
	}
}
</script>
